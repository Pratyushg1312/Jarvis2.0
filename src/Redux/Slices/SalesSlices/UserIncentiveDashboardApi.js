import { createApi } from "@reduxjs/toolkit/query/react";
import authBaseQuery from "../../../Utils/authBaseQuery";
import { IncentiveDashboard } from "../../../Pages/Sales/Index";

const UserIncentiveDashboardApi = createApi({
  reducerPath: "userIncentiveDashboardApi",
  baseQuery: authBaseQuery,
  endpoints: (builder) => ({
    getAllSalesUsers: builder.query({
      query: () => "get_all_sales_users_list",
      transformResponse: (response) => response,
      keepUnusedDataFor: 3600, // Keep the data for 1 hour
    }),
    getAdjustment: builder.query({
      query: (id) => `sales/user_adjustment_incentive_amount/${id}`,
      transformResponse: (response) => response.data.data,
    }),

    // Fetch details of a single incentive plan
    getIncentiveCalculationwise: builder.query({
      query: ({ id, status, year, month }) =>
        `sales/incentive_calculation_status_wise_data${id ? `/${id}` : ""}${
          status ? `?incentive_earning_status=${status}` : ""
        }${year ? `&year=${year}` : ""}${month ? `&month=${month}` : ""}`,
      transformResponse: (response) => response,
    }),

    getReleaseButtonStatus: builder.query({
      query: (id) =>
        `sales/incentive_released_button_condition${id ? "/" + id : ""}`,
      transformResponse: (response) => response?.data,
    }),

    getIncentiveMonthWise: builder.query({
      query: (id) =>
        `sales/incentive_calculation_month_wise${id ? "/" + id : ""}`,
      transformResponse: (response) => response,
    }),

    incentiveRelease: builder.mutation({
      query: (payload) => ({
        url: `sales/incentive_request`,
        method: "POST",
        body: payload,
      }),
    }),

    incentiveCalculationDashboard: builder.mutation({
      query: ({ userId, ...payload }) => ({
        url: `sales/incentive_calculation_dashboard${
          userId ? `?userId=${userId}` : ""
        }`,
        method: "POST",
        body: payload,
      }),
    }),
  }),
});

// Export the hooks generated by createApi
export const {
  useGetAllSalesUsersQuery,
  useGetAdjustmentQuery,
  useGetIncentiveCalculationwiseQuery,
  useGetReleaseButtonStatusQuery,
  useGetIncentiveMonthWiseQuery,
  useIncentiveReleaseMutation,
  useIncentiveCalculationDashboardMutation,
} = UserIncentiveDashboardApi;

export default UserIncentiveDashboardApi;
